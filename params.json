{"name":"Wingman","tagline":"We've got you covered","body":"# Welcome to WINGMAN\r\nWINGMAN is a Javascript DSL for generating [cypher](http://neo4j.com/docs/) queries. It is designed to **only** support querying, not updating, deleting or any other operations that could modify data. Additionally, the system currently outputs all of the queries in parameterized format in order to allow the database the better optimize queries. This is very much a work in progress. Contributions, forks, comments, etc. are welcome.\r\n\r\n## Design\r\nWINGMAN is designed as a [fluent api](http://en.wikipedia.org/wiki/Fluent_interface). Its basic structures primarily mirror those defined by the cypher language and are described below.\r\n\r\n### Namespace\r\nIn order to avoid collisions with other JS libraries, all classes, functions, etc reside in the Factgem.wingman namespace.\r\n\r\n### Cypher\r\nThis is the top level object that will ultimately produce the desired cypher query. It supports the following methods:\r\n* `addMatch(match)`\r\n* `removeMatch(match)`\r\n* `addOptionalMatch(match)`\r\n* `removeOptionalMatch(match)`\r\n* `limitTo(limit)`\r\n* `andSkip(skip)`\r\n* `andReturn(return)`\r\n* `toString()`\r\n\r\n### Match\r\nMatch describes the patterns and properties of nodes, relationships and paths that will be used to find information. Currently, a match can have just a start node **or** it can have a starNode, relationship and and endNode. More complex match paths must be represented by multiple match objects. This may change in a future release. It supports the following methods:\r\n* `withStartNode(startnode)`\r\n* `withRelationship(relationship)`\r\n* `withEndNode(endnode)`\r\n* `where(where)`\r\n* `toString()`\r\n\r\n### Node\r\nNode represents a node in the database. It supports the following methods:\r\n* `addProperty(name,value)`\r\n\r\n### Relationship\r\nRelationship represents a relationship in the database. It supports the following methods:\r\n* `addProperty(name,value)`\r\n\r\n### Where\r\nWhere represents a clause that defines matching parameters for a match object. It supports the following methods:\r\n* `equals(value)`\r\n* `lessThan(value)`\r\n* `greaterThan(value)`\r\n* `notEqual(value)`\r\n* `lessThanOrEqual(value)`\r\n* `greaterThanOrEqualTo(value)`\r\n* `toString()`\r\n\r\n### Return\r\nReturn defines what data should be returned from the query. It supports the following methods:\r\n* `variable(variable)`\r\n* `property(property)`\r\n* `andReturn()`\r\n* `orderBy(variable, property)`\r\n* `descending()`\r\n* `skip(skip)`\r\n* `limit(limit)`\r\n* `distinctValues()`\r\n* `countResults()`\r\n* `toString()`\r\n\r\n## Contributors\r\n* @crichey","google":"UA-59283819-2","note":"Don't delete this file! It's used internally to help with page regeneration."}